{"version":3,"sources":["Movie.js","App.js","index.js"],"names":["Movie","id","year","title","summary","poster","genres","className","src","alt","map","genre","index","key","slice","App","state","isLoading","movies","getMovies","a","axios","get","data","this","setState","movie","medium_cover_image","React","Component","ReactDOM","render","document","getElementById"],"mappings":"kUAiCeA,MA5Bf,YAA6D,EAA5CC,GAA6C,IAAzCC,EAAwC,EAAxCA,KAAMC,EAAkC,EAAlCA,MAAOC,EAA2B,EAA3BA,QAASC,EAAkB,EAAlBA,OAAQC,EAAU,EAAVA,OACjD,OACE,yBAAKC,UAAU,SACb,yBAAKC,IAAKH,EAAQI,IAAKN,EAAOA,MAAOA,IACrC,yBAAKI,UAAU,eACb,wBAAIA,UAAU,gBAAgBJ,GAC9B,wBAAII,UAAU,eAAeL,GAC7B,wBAAIK,UAAU,iBACXD,EAAOI,KAAI,SAACC,EAAOC,GAAR,OACV,wBAAIC,IAAKD,EAAOL,UAAU,gBACvBI,OAIL,uBAAGJ,UAAU,kBAAkBH,EAAQU,MAAM,EAAG,KAAhD,UCiJKC,G,iNAvDbC,MAAQ,CACNC,WAAW,EACXC,OAAQ,I,EAGVC,U,sBAAY,8BAAAC,EAAA,sEAQAC,IAAMC,IACd,4DATQ,gBAMEJ,EANF,EAKRK,KACEA,KAAQL,OAMZM,KAAKC,SAAS,CAAEP,OAAQA,EAAQD,WAAW,IAZjC,gD,mFAiBVO,KAAKL,c,+BAGG,IAAD,EACuBK,KAAKR,MAA3BC,EADD,EACCA,UAAWC,EADZ,EACYA,OAEnB,OACE,6BAASX,UAAU,aAChBU,EACC,yBAAKV,UAAU,UACb,0BAAMA,UAAU,gBAAhB,eAGF,yBAAKA,UAAU,UACdW,EAAOR,KAAI,SAAAgB,GAAK,OACf,kBAAC,EAAD,CACEb,IAAKa,EAAMzB,GACXA,GAAIyB,EAAMzB,GACVC,KAAMwB,EAAMxB,KACZC,MAAOuB,EAAMvB,MACbC,QAASsB,EAAMtB,QACfC,OAAQqB,EAAMC,mBACdrB,OAAQoB,EAAMpB,kB,GA7CVsB,IAAMC,YCxGxBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,a","file":"static/js/main.ab70ecd5.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Movie.css\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nfunction Movie({ id, year, title, summary, poster, genres }) {\r\n  return (\r\n    <div className=\"movie\">\r\n      <img src={poster} alt={title} title={title}></img>\r\n      <div className=\"movie__data\">\r\n        <h3 className=\"movie__title\">{title}</h3>\r\n        <h5 className=\"movie__year\">{year}</h5>\r\n        <ul className=\"movie__genres\">\r\n          {genres.map((genre, index) => (\r\n            <li key={index} className=\"genres_genre\">\r\n              {genre}\r\n            </li>\r\n          ))}\r\n        </ul>\r\n          <p className=\"movie__summary\">{summary.slice(0, 140)}...</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nMovie.propTypes = {\r\n  id: PropTypes.number.isRequired,\r\n  year: PropTypes.number.isRequired,\r\n  title: PropTypes.string.isRequired,\r\n  summary: PropTypes.string.isRequired,\r\n  poster: PropTypes.string.isRequired,\r\n  genres: PropTypes.arrayOf(PropTypes.string).isRequired\r\n};\r\n\r\nexport default Movie;\r\n","import React from \"react\";\n\n/* 이름하고 정보 뿌리기\n\nimport PropTypes from \"prop-types\";\n\nconst foodILike = [\n  {\n    id:1,\n    name: \"Kimchi\",\n    image:\n    \"https://cdn1.i-scmp.com/sites/default/files/styles/768x768/public/2015/04/21/food_53616c7465645f5f227c842cecb47f23.jpg?itok=NmcO4rxJ\",\n    rating: 5\n  },\n  {\n    id:2,\n    name: \"ramen\",\n    image:\n    \"https://upload.wikimedia.org/wikipedia/commons/thumb/d/dc/Shoyu_Ramen.jpg/1200px-Shoyu_Ramen.jpg\",\n    rating: 4.9\n  },\n  {\n    id:3,\n    name: \"samgiopsal\",\n    image:\n    \"https://pds.joins.com/news/component/htmlphoto_mmdata/201702/27/117f5b49-1d09-4550-8ab7-87c0d82614de.jpg\",\n    rating: 4.8\n  },\n  {\n    id:4,\n    name: \"chukumi\",\n    image:\n      \"https://lh3.googleusercontent.com/proxy/Nr1wnJ-NIt3PD-QPETOO2buX2Tilu5ZQ4lJLM6xdbAM3T5jaCyMGrPNh9ucbXE4giirft4vlBP2ynDDeBKxXS2O8YfeHYSrCz71UpnJs-PDvzjfuo-CmIU3K-nuxsOQre2_fHeXeY68XwLkpbpJ5JuKInFkTkFVoaS3bFg0zcb5lmvKXzKDWXV19LI-BBR-0HAQbJHygzhOg6FFzd-w07hMWqoN_qhGm-ZeHtdyypNFvKVMGaGs-MDn0YAg1skINkFF85arBaUegdId-d4Qh-pZu5reiApyVP5rqJiOgZy7bUipKtRkYPoeM648MKF_vNSra4VYsppqlgrt3KXIfQM09OQlIiqgoUv2G8Ss\",\n    rating: 4.7\n  }\n];\n\n\nfunction Food({ name, picture, rating }) {\n  return (\n    <div>\n      <h2>I like {name}</h2>\n      <h4>{rating}/5.0</h4>\n      <img src={picture} alt={name}/>\n    </div>\n  );\n}\n\nFood.propTypes = { //무조건 propTypes로 이름을 적어야 검사가 됨\n  //검사할 항목: PropTypes.자료형태.이 자료가 필수인가?\n  name: PropTypes.string.isRequired,\n  picture: PropTypes.string.isRequired,\n  rating: PropTypes.number.isRequired\n}\n\nfunction App() {\n  return (\n    <div>\n      {foodILike.map(dish =>(\n        <Food key={dish.id} name={dish.name} picture={dish.image} rating={dish.rating}/>)\n      )}\n    </div>\n  );\n}\n*/\n/* 점수 높이고 낮추기 & setState\nclass App extends React.Component {\n  constructor(props){\n    super(props);\n    console.log(\"Hello\");\n  }\n  state = { //내가 바꿀 동적인 데이터를 state안에 넣는다\n    count: 0\n  };\n\n  add = () =>{\n    //console.log(\"add\");\n    //매 순간 setState를 호출할때마다 react는 새로운 state와 함께 rander function을 호출한다. re-rander\n    //this.setState({count: this.state.count + 1}) setState에서 state를 내부에 사용시 count의 외부의 상태 의존성이 높아 안좋은 코드임\n    this.setState(current => ({count: current.count + 1}));\n  };\n  minus = () =>{\n    //console.log(\"minus\");\n    this.setState(current => ({count: current.count - 1}));\n  };\n  componentDidMount(){\n    console.log(\"component randered\")\n  }\n  componentDidUpdate(){\n    console.log(\"component updated\")\n  }\n  render() {\n    console.log(\"I'm randering\");\n    return (\n      <div>\n        <h1>The number is: {this.state.count}</h1>\n        <button onClick={this.add}>Add</button>\n        <button onClick={this.minus}>Minus</button>\n      </div>\n    );\n  }\n}\n*/\n\nimport axios from \"axios\";\nimport Movie from \"./Movie\";\nimport \"./App.css\"\n\nclass App extends React.Component {\n  state = {\n    isLoading: true,\n    movies: []\n  };\n\n  getMovies = async function() {\n    //getMovies는 axios.get을 사용하지만 axios.get이 완료되기까지 시간이 필요하기 때문에 async와 await를 넣었음\n    //const movies = await axios.get(\"https://yts-proxy.now.sh/list_movies.json\");\n    //console.log(movies.data.data.movies);\n    const {\n      data: {\n        data: { movies }\n      }\n    } = await axios.get(\n      \"https://yts-proxy.now.sh/list_movies.json?sort_by=rating\"\n    );\n    //console.log(movies);\n    this.setState({ movies: movies, isLoading: false }); //setState의 movies : axios의 movies\n  };\n\n  componentDidMount() {\n    //setTimeout(() => { this.setState({ isLoading: false }); }, 6000);\n    this.getMovies();\n  }\n\n  render() {\n    const { isLoading, movies } = this.state;\n\n    return (\n      <section className=\"container\">\n        {isLoading ? (\n          <div className=\"loader\">\n            <span className=\"loader__text\">Loading...</span>\n          </div>\n        ) : (\n          <div className=\"movies\">\n          {movies.map(movie => (\n            <Movie\n              key={movie.id}\n              id={movie.id}\n              year={movie.year}\n              title={movie.title}\n              summary={movie.summary}\n              poster={movie.medium_cover_image}\n              genres={movie.genres}\n            />\n          ))}\n          </div>\n        )}\n      </section>\n    );\n    //isLoading은 const {isLoading} = this.state;이 없으면 this.state.isLoading으로 사용할 수 있다.\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('potato'));"],"sourceRoot":""}